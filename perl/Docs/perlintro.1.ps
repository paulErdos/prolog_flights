%!PS-Adobe-3.0
%%Creator: groff version 1.17.2
%%CreationDate: Mon Jan  6 13:54:19 2003
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Courier
%%+ font Symbol
%%+ font Courier-Oblique
%%DocumentSuppliedResources: procset grops 1.17 2
%%Pages: 9
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.17 2
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-Oblique
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier-Oblique@0 ENC0/Courier-Oblique RE/Courier@0 ENC0/Courier RE
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G/F1 9/Times-Bold@0 SF -.18(NA)72
96 S(ME).18 E F0(perlintro \255\255 a brief introduction and o)108 108 Q
-.15(ve)-.15 G(rvie).15 E 2.5(wo)-.25 G 2.5(fP)-2.5 G(erl)-2.5 E F1
(DESCRIPTION)72 124.8 Q F0 1.316(This document is intended to gi)108
136.8 R 1.616 -.15(ve y)-.25 H 1.316(ou a quick o).15 F -.15(ve)-.15 G
(rvie).15 E 3.816(wo)-.25 G 3.815(ft)-3.816 G 1.315
(he Perl programming language, along with)-3.815 F 1.645
(pointers to further documentation.)108 148.8 R 1.645
(It is intended as a `)6.645 F(`bootstrap')-.74 E 4.145('g)-.74 G 1.646
(uide for those who are ne)-4.145 F 4.146(wt)-.25 G 4.146(ot)-4.146 G
(he)-4.146 E 2.691(language, and pro)108 160.8 R 2.691(vides just enoug\
h information for you to be able to read other peoples' Perl and)-.15 F
(understand roughly what it')108 172.8 Q 2.5(sd)-.55 G
(oing, or write your o)-2.5 E(wn simple scripts.)-.25 E .569
(This introductory document does not aim to be complete.)108 189.6 R
.569(It does not e)5.569 F -.15(ve)-.25 G 3.069(na).15 G .569
(im to be entirely accurate.)-3.069 F(In)5.569 E .82(some cases perfect\
ion has been sacri\214ced in the goal of getting the general idea acros\
s.)108 201.6 R -1.1(Yo)5.819 G 3.319(ua)1.1 G(re)-3.319 E/F2 10
/Times-Italic@0 SF(str)3.319 E(ongly)-.45 E F0 .101(advised to follo)108
213.6 R 2.601(wt)-.25 G .101(his introduction with more information fro\
m the full Perl manual, the table of contents to)-2.601 F
(which can be found in perltoc.)108 225.6 Q .136
(Throughout this document you')108 242.4 R .136
(ll see references to other parts of the Perl documentation.)-.1 F -1.1
(Yo)5.135 G 2.635(uc)1.1 G .135(an read that)-2.635 F
(documentation using the)108 254.4 Q/F3 10/Courier@0 SF(perldoc)2.5 E F0
(command or whate)2.5 E -.15(ve)-.25 G 2.5(rm).15 G(ethod you')-2.5 E
(re using to read this document.)-.5 E/F4 10/Times-Bold@0 SF(What is P)
108 277.2 Q(erl?)-.2 E F0 .669
(Perl is a general-purpose programming language originally de)108 294 R
-.15(ve)-.25 G .669(loped for te).15 F .67(xt manipulation and no)-.15 F
3.17(wu)-.25 G(sed)-3.17 E .889
(for a wide range of tasks including system administration, web de)108
306 R -.15(ve)-.25 G .889(lopment, netw).15 F .889(ork programming,)-.1
F/F5 9/Times-Roman@0 SF(GUI)3.389 E F0(de)108 318 Q -.15(ve)-.25 G
(lopment, and more.).15 E
(The language is intended to be practical \(easy to use, ef)108 334.8 Q
.001(\214cient, complete\) rather than beautiful \(tin)-.25 F 1.301 -.65
(y, e)-.15 H(le).65 E -.05(ga)-.15 G(nt,).05 E 3.698(minimal\). Its)108
346.8 R 1.198(major features are that it')3.698 F 3.698(se)-.55 G 1.197
(asy to use, supports both procedural and object-oriented \()-3.698 F F5
(OO)A F0(\))A .154(programming, has po)108 358.8 R .154(werful b)-.25 F
.154(uilt-in support for te)-.2 F .154
(xt processing, and has one of the w)-.15 F(orld')-.1 E 2.654(sm)-.55 G
.154(ost impressi)-2.654 F -.15(ve)-.25 G
(collections of third-party modules.)108 370.8 Q(Dif)108 387.6 Q 1.996
(ferent de\214nitions of Perl are gi)-.25 F -.15(ve)-.25 G 4.496(ni).15
G 4.496(np)-4.496 G 1.996(erl, perlf)-4.496 F 1.996
(aq1 and no doubt other places.)-.1 F 1.995(From this we can)6.996 F
1.16(determine that Perl is dif)108 399.6 R 1.16(ferent things to dif)
-.25 F 1.16(ferent people, b)-.25 F 1.161
(ut that lots of people think it')-.2 F 3.661(sa)-.55 G 3.661(tl)-3.661
G 1.161(east w)-3.661 F(orth)-.1 E(writing about.)108 411.6 Q F4
(Running P)108 434.4 Q(erl pr)-.2 E(ograms)-.18 E F0 1.6 -.8(To r)108
451.2 T(un a Perl program from the Unix command line:).8 E F3
(perl progname.pl)132 468 Q F0(Alternati)108 484.8 Q -.15(ve)-.25 G(ly)
.15 E 2.5(,p)-.65 G(ut this as the \214rst line of your script:)-2.5 E
F3(#!/usr/bin/env perl)132 501.6 Q F0 .747(... and run the script as)108
518.4 R F3(/path/to/script.pl)3.247 E F0 5.747(.O)C 3.247(fc)-5.747 G
.747(ourse, it')-3.247 F .747(ll need to be e)-.1 F -.15(xe)-.15 G .747
(cutable \214rst, so).15 F F3(chmod)3.246 E(755 script.pl)108 530.4 Q F0
(\(under Unix\).)2.5 E -.15(Fo)108 547.2 S 4.659(rm).15 G 2.16
(ore information, including instructions for other platforms such as W)
-4.659 F(indo)-.4 E 2.16(ws and Mac)-.25 F F5(OS)4.66 E F0 4.66(,r)C
(ead)-4.66 E(perlrun.)108 559.2 Q F4(Basic syntax o)108 582 Q -.1(ve)-.1
G -.1(rv).1 G(iew).1 E F0 3.52(AP)108 598.8 S 1.02
(erl script or program consists of one or more statements.)-3.52 F 1.019
(These statements are simply written in the)6.019 F
(script in a straightforw)108 610.8 Q(ard f)-.1 E 2.5(ashion. There)-.1
F(is no need to ha)2.5 E .3 -.15(ve a)-.2 H F3(main\(\))2.65 E F0
(function or an)2.5 E(ything of that kind.)-.15 E
(Perl statements end in a semi\255colon:)108 627.6 Q F3
(print "Hello, world";)132 644.4 Q F0
(Comments start with a hash symbol and run to the end of the line)108
661.2 Q F3 6(#T)132 678 S(his is a comment)-6 E F0(Whitespace is irrele)
108 694.8 Q -.25(va)-.25 G(nt:).25 E(perl v5.8.0)72 768 Q
(Last change: 2002-06-08)140.96 E(1)179.01 E EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G/F1 10/Courier@0 SF(print)132 96 Q
("Hello, world")156 108 Q(;)156 120 Q F0(... e)108 136.8 Q
(xcept inside quoted strings:)-.15 E F1 6(#t)132 153.6 S
(his would print with a linebreak in the middle)-6 E(print "Hello)132
165.6 Q(world";)132 177.6 Q F0
(Double quotes or single quotes may be used around literal strings:)108
194.4 Q F1(print "Hello, world";)132 211.2 Q(print 'Hello, world';)132
223.2 Q F0(Ho)108 240 Q(we)-.25 E -.15(ve)-.25 G .8 -.4(r, o).15 H
(nly double quotes `).4 E(`interpolate')-.74 E 2.5('v)-.74 G
(ariables and special characters such as ne)-2.75 E(wlines \()-.25 E F1
(\\n)A F0(\):)A F1(print "Hello, $name\\n";)132 256.8 Q 6(#w)30 G
(orks fine)-6 E(print 'Hello, $name\\n';)132 268.8 Q 6(#p)30 G
(rints $name\\n literally)-6 E F0(Numbers don')108 285.6 Q 2.5(tn)-.18 G
(eed quotes around them:)-2.5 E F1(print 42;)132 302.4 Q F0 -1.1(Yo)108
319.2 S 2.893(uc)1.1 G .393(an use parentheses for functions' ar)-2.893
F .394(guments or omit them according to your personal taste.)-.18 F
(The)5.394 E 2.894(ya)-.15 G(re)-2.894 E
(only required occasionally to clarify issues of precedence.)108 331.2 Q
F1(print\("Hello, world\\n"\);)132 348 Q(print "Hello, world\\n";)132
360 Q F0
(More detailed information about Perl syntax can be found in perlsyn.)
108 376.8 Q/F2 10/Times-Bold@0 SF -.2(Pe)108 399.6 S(rl v).2 E
(ariable types)-.1 E F0(Perl has three main v)108 416.4 Q
(ariable types: scalars, arrays, and hashes.)-.25 E(Scalars)108 433.2 Q
2.5(As)128 445.2 S(calar represents a single v)-2.5 E(alue:)-.25 E F1
(my $animal = "camel";)152 463.2 Q(my $answer = 42;)152 475.2 Q F0 1.167
(Scalar v)128 493.2 R 1.167(alues can be strings, inte)-.25 F 1.166
(gers or \215oating point numbers, and Perl will automatically con)-.15
F -.15(ve)-.4 G(rt).15 E(between them as required.)128 505.2 Q
(There is no need to pre-declare your v)5 E(ariable types.)-.25 E
(Scalar v)128 523.2 Q(alues can be used in v)-.25 E(arious w)-.25 E
(ays:)-.1 E F1(print $animal;)152 541.2 Q
(print "The animal is $animal\\n";)152 553.2 Q
(print "The square of $answer is ", $answer)152 565.2 Q/F3 10/Symbol SF
(*)6 E F1($answer, "\\n";)6 E F0 1.132(There are a number of `)128 583.2
R(`magic')-.74 E 3.632('s)-.74 G 1.132(calars with names that look lik)
-3.632 F 3.632(ep)-.1 G 1.132(unctuation or line noise.)-3.632 F(These)
6.132 E .414(special v)128 595.2 R .414(ariables are used for all kinds\
 of purposes, and are documented in perlv)-.25 F(ar)-.25 E 5.413(.T)-.55
G .413(he only one you)-5.413 F .097(need to kno)128 607.2 R 2.597(wa)
-.25 G .097(bout for no)-2.597 F 2.597(wi)-.25 G(s)-2.597 E F1($_)2.597
E F0 .097(which is the `)2.597 F(`def)-.74 E .097(ault v)-.1 F(ariable')
-.25 E 2.598('. It')-.74 F 2.598(su)-.55 G .098(sed as the def)-2.598 F
.098(ault ar)-.1 F .098(gument to)-.18 F 2.5(an)128 619.2 S
(umber of functions in Perl, and it')-2.5 E 2.5(ss)-.55 G
(et implicitly by certain looping constructs.)-2.5 E F1 54(print; #)152
637.2 R(prints contents of $_ by default)6 E F0(Arrays)108 654 Q
(An array represents a list of v)128 666 Q(alues:)-.25 E F1
(my @animals = \("camel", "llama", "owl"\);)152 684 Q
(my @numbers = \(23, 42, 69\);)152 696 Q(my @mixed)152 708 Q 6(=\()18 G
("camel", 42, 1.23\);)-6 E F0(Arrays are zero\255inde)128 726 Q -.15(xe)
-.15 G 2.5(d. Here').15 F 2.5(sh)-.55 G .5 -.25(ow y)-2.5 H
(ou get at elements in an array:).25 E(perl v5.8.0)72 774 Q
(Last change: 2002-06-08)140.96 E(2)179.01 E EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G/F1 10/Courier@0 SF
(print $animals[0];)152 96 Q 6(#p)84 G(rints "camel")-6 E
(print $animals[1];)152 108 Q 6(#p)84 G(rints "llama")-6 E F0
(The special v)128 126 Q(ariable)-.25 E F1($#array)2.5 E F0
(tells you the inde)2.5 E 2.5(xo)-.15 G 2.5(ft)-2.5 G
(he last element of an array:)-2.5 E F1(print $mixed[$#mixed];)152 144 Q
6(#l)42 G(ast element, prints 1.23)-6 E F0 -1.1(Yo)128 162 S 2.752(um)
1.1 G .252(ight be tempted to use)-2.752 F F1 .252($#array + 1)2.752 F
F0 .252(to tell you ho)2.752 F 2.752(wm)-.25 G(an)-2.752 E 2.752(yi)-.15
G .252(tems there are in an array)-2.752 F 5.252(.D)-.65 G(on')-5.252 E
(t)-.18 E(bother)128 174 Q 5.663(.A)-.55 G 3.163(si)-5.663 G 3.163(th)
-3.163 G .663(appens, using)-3.163 F F1(@array)3.163 E F0 .663
(where Perl e)3.163 F .663(xpects to \214nd a scalar v)-.15 F .663
(alue \(`)-.25 F .664(`in scalar conte)-.74 F(xt')-.15 E('\))-.74 E
(will gi)128 186 Q .3 -.15(ve y)-.25 H
(ou the number of elements in the array:).15 E F1
(if \(@animals < 5\) { ... })152 204 Q F0 .532(The elements we')128 222
R .531(re getting from the array start with a)-.5 F F1($)3.031 E F0 .531
(because we')3.031 F .531(re getting just a single v)-.5 F .531
(alue out)-.25 F(of the array)128 234 Q 4.166<8a79>4.166 G
(ou ask for a scalar)-4.166 E 2.5(,y)-.4 G(ou get a scalar)-2.5 E(.)-.55
E 1.6 -.8(To g)128 252 T(et multiple v).8 E(alues from an array:)-.25 E
F1 102(@animals[0,1]; #)152 270 R(gives \("camel", "llama"\);)6 E 96
(@animals[0..2]; #)152 282 R(gives \("camel", "llama", "owl"\);)6 E 48
(@animals[1..$#animals]; #)152 294 R(gives all except the first element)
6 E F0(This is called an `)128 312 Q(`array slice')-.74 E('.)-.74 E -1.1
(Yo)128 330 S 2.5(uc)1.1 G(an do v)-2.5 E
(arious useful things to lists:)-.25 E F1(my @sorted)152 348 Q 6(=s)24 G
(ort @animals;)-6 E(my @backwards = reverse @numbers;)152 360 Q F0 .427
(There are a couple of special arrays too, such as)128 378 R F1(@ARGV)
2.928 E F0 .428(\(the command line ar)2.928 F .428
(guments to your script\))-.18 F(and)128 390 Q F1(@_)2.5 E F0(\(the ar)
2.5 E(guments passed to a subroutine\).)-.18 E
(These are documented in perlv)5 E(ar)-.25 E(.)-.55 E(Hashes)108 406.8 Q
2.5(Ah)128 418.8 S(ash represents a set of k)-2.5 E -.15(ey)-.1 G(/v).15
E(alue pairs:)-.25 E F1
(my %fruit_color = \("apple", "red", "banana", "yellow"\);)152 436.8 Q
F0 -1.1(Yo)128 454.8 S 2.5(uc)1.1 G(an use whitespace and the)-2.5 E F1
(=>)2.5 E F0(operator to lay them out more nicely:)2.5 E F1
(my %fruit_color = \()152 472.8 Q 6(apple =>)176 484.8 R("red",)6 E
(banana => "yellow",)176 496.8 Q(\);)152 508.8 Q F0 1.6 -.8(To g)128
526.8 T(et at hash elements:).8 E F1 60($fruit_color{"apple"}; #)152
544.8 R(gives "red")6 E F0 -1.1(Yo)128 562.8 S 2.5(uc)1.1 G
(an get at lists of k)-2.5 E -.15(ey)-.1 G 2.5(sa).15 G(nd v)-2.5 E
(alues with)-.25 E F1(keys\(\))2.5 E F0(and)2.5 E F1(values\(\))2.5 E F0
(.)A F1(my @fruits = keys %fruit_colors;)152 580.8 Q
(my @colors = values %fruit_colors;)152 592.8 Q F0(Hashes ha)128 610.8 Q
.3 -.15(ve n)-.2 H 2.5(op).15 G(articular internal order)-2.5 E 2.5(,t)
-.4 G(hough you can sort the k)-2.5 E -.15(ey)-.1 G 2.5(sa).15 G
(nd loop through them.)-2.5 E 1.189(Just lik)128 628.8 R 3.689(es)-.1 G
1.189(pecial scalars and arrays, there are also special hashes.)-3.689 F
1.189(The most well kno)6.189 F 1.188(wn of these is)-.25 F F1(%ENV)128
640.8 Q F0 .202(which contains en)2.702 F .202(vironment v)-.4 F 2.702
(ariables. Read)-.25 F .202(all about it \(and other special v)2.702 F
.203(ariables\) in perlv)-.25 F(ar)-.25 E(.)-.55 E
(Scalars, arrays and hashes are documented more fully in perldata.)108
657.6 Q 1.053(More comple)108 674.4 R 3.553(xd)-.15 G 1.053
(ata types can be constructed using references, which allo)-3.553 F
3.552(wy)-.25 G 1.052(ou to b)-3.552 F 1.052(uild lists and hashes)-.2 F
(within lists and hashes.)108 686.4 Q 2.614(Ar)108 703.2 S .114
(eference is a scalar v)-2.614 F .114(alue and can refer to an)-.25 F
2.615(yo)-.15 G .115
(ther Perl data type. So by storing a reference as the v)-2.615 F(alue)
-.25 E .839(of an array or hash element, you can easily create lists an\
d hashes within lists and hashes. The follo)108 715.2 R(wing)-.25 E -.15
(ex)108 727.2 S(ample sho).15 E(ws a 2 le)-.25 E -.15(ve)-.25 G 2.5(lh)
.15 G(ash of hash structure using anon)-2.5 E(ymous hash references.)
-.15 E(perl v5.8.0)72 775.2 Q(Last change: 2002-06-08)140.96 E(3)179.01
E EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G/F1 10/Courier@0 SF
(my $variables = {)132 96 Q 6(scalar => {)156 108 R
(description => "single item",)234 120 Q(sigil => '$',)234 132 Q(},)228
144 Q 12(array =>)156 156 R({)12 E
(description => "ordered list of items",)234 168 Q(sigil => '@',)234 180
Q(},)228 192 Q 18(hash =>)156 204 R({)12 E
(description => "key/value pairs",)234 216 Q(sigil => '%',)234 228 Q(},)
228 240 Q(};)132 252 Q
(print "Scalars begin with a $variables->{'scalar'}->{'sigil'}\\n";)132
268.8 Q F0(Exhausti)108 285.6 Q .3 -.15(ve i)-.25 H(nformation on the t\
opic of references can be found in perlreftut, perllol, perlref and per\
ldsc.).15 E/F2 10/Times-Bold@0 SF -.92(Va)108 308.4 S(riable scoping).92
E F0(Throughout the pre)108 325.2 Q(vious section all the e)-.25 E
(xamples ha)-.15 E .3 -.15(ve u)-.2 H(sed the syntax:).15 E F1
(my $var = "value";)132 342 Q F0(The)108 358.8 Q F1(my)2.5 E F0
(is actually not required; you could just use:)2.5 E F1($var = "value";)
132 375.6 Q F0(Ho)108 392.4 Q(we)-.25 E -.15(ve)-.25 G .904 -.4(r, t).15
H .104(he abo).4 F .404 -.15(ve u)-.15 H .104(sage will create global v)
.15 F .105(ariables throughout your program, which is bad programming)
-.25 F(practice.)108 404.4 Q F1(my)5.408 E F0 .408(creates le)2.908 F
.408(xically scoped v)-.15 F .408(ariables instead.)-.25 F .408(The v)
5.408 F .407(ariables are scoped to the block \(i.e. a b)-.25 F(unch)-.2
E(of statements surrounded by curly\255braces\) in which the)108 416.4 Q
2.5(ya)-.15 G(re de\214ned.)-2.5 E F1(my $a = "foo";)132 433.2 Q
(if \($some_condition\) {)132 445.2 Q(my $b = "bar";)156 457.2 Q
(print $a;)156 469.2 Q 6(#p)66 G(rints "foo")-6 E(print $b;)156 481.2 Q
6(#p)66 G(rints "bar")-6 E(})132 493.2 Q(print $a;)132 505.2 Q 6(#p)90 G
(rints "foo")-6 E(print $b;)132 517.2 Q 6(#p)90 G
(rints nothing; $b has fallen out of scope)-6 E F0(Using)108 534 Q F1
(my)3.171 E F0 .671(in combination with a)3.171 F F1 .672(use strict;)
3.171 F F0 .672
(at the top of your Perl scripts means that the interpreter)3.172 F
1.196(will pick up certain common programming errors.)108 546 R -.15(Fo)
6.195 G 3.695(ri).15 G 1.195(nstance, in the e)-3.695 F 1.195
(xample abo)-.15 F -.15(ve)-.15 G 3.695(,t).15 G 1.195(he \214nal)-3.695
F F1(print)3.695 E($b)108 558 Q F0 -.1(wo)2.68 G .18
(uld cause a compile-time error and pre).1 F -.15(ve)-.25 G .181
(nt you from running the program.).15 F(Using)5.181 E F1(strict)2.681 E
F0 .181(is highly)2.681 F(recommended.)108 570 Q F2
(Conditional and looping constructs)108 592.8 Q F0 .327
(Perl has most of the usual conditional and looping constructs e)108
609.6 R .327(xcept for case/switch \(b)-.15 F .327(ut if you really w)
-.2 F(ant)-.1 E .937(it, there is a Switch module in Perl 5.8 and ne)108
621.6 R(wer)-.25 E 3.438(,a)-.4 G .938(nd on)-3.438 F/F3 9/Times-Roman@0
SF(CP)3.438 E(AN)-.828 E F0 3.438(.S)C .938
(ee the section on modules, belo)-3.438 F 2.238 -.65(w, f)-.25 H(or).65
E(more information about modules and)108 633.6 Q F3(CP)2.5 E(AN)-.828 E
F0(\).)A .541(The conditions can be an)108 650.4 R 3.041(yP)-.15 G .541
(erl e)-3.041 F 3.041(xpression. See)-.15 F .54
(the list of operators in the ne)3.041 F .54
(xt section for information on)-.15 F(comparison and boolean logic oper\
ators, which are commonly used in conditional statements.)108 662.4 Q
(if)108 679.2 Q(perl v5.8.0)72 768 Q(Last change: 2002-06-08)140.96 E(4)
179.01 E EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G/F1 10/Courier@0 SF
(if \( condition \) {)152 96 Q(...)176 108 Q 6(}e)152 120 S
(lsif \( other condition \) {)-6 E(...)176 132 Q 6(}e)152 144 S(lse {)-6
E(...)176 156 Q(})152 168 Q F0(There')128 186 Q 2.5(sa)-.55 G(lso a ne)
-2.5 E -.05(ga)-.15 G(ted v).05 E(ersion of it:)-.15 E F1
(unless \( condition \) {)152 204 Q(...)176 216 Q(})152 228 Q F0
(This is pro)128 246 Q(vided as a more readable v)-.15 E(ersion of)-.15
E F1(if \(!)2.5 E/F2 10/Courier-Oblique@0 SF(condition)A F1(\))A F0(.)A
.177(Note that the braces are required in Perl, e)128 264 R -.15(ve)-.25
G 2.677(ni).15 G 2.677(fy)-2.677 G(ou')-2.677 E .477 -.15(ve o)-.5 H
.177(nly got one line in the block.).15 F(Ho)5.177 E(we)-.25 E -.15(ve)
-.25 G .977 -.4(r, t).15 H(here).4 E(is a cle)128 276 Q -.15(ve)-.25 G
2.5(rw).15 G
(ay of making your one-line conditional blocks more English lik)-2.6 E
(e:)-.1 E F1 6(#t)152 294 S(he traditional way)-6 E(if \($zippy\) {)152
306 Q(print "Yow!";)176 318 Q(})152 330 Q 6(#t)152 348 S
(he Perlish post-condition way)-6 E(print "Yow!" if $zippy;)152 360 Q
(print "We have no bananas" unless $bananas;)152 372 Q F0(while)108
388.8 Q F1(while \( condition \) {)152 400.8 Q(...)176 412.8 Q(})152
424.8 Q F0(There')128 442.8 Q 2.5(sa)-.55 G(lso a ne)-2.5 E -.05(ga)-.15
G(ted v).05 E(ersion, for the same reason we ha)-.15 E -.15(ve)-.2 G F1
(unless)2.65 E F0(:)A F1(until \( condition \) {)152 460.8 Q(...)176
472.8 Q(})152 484.8 Q F0 -1.1(Yo)128 502.8 S 2.5(uc)1.1 G(an also use)
-2.5 E F1(while)2.5 E F0(in a post\255condition:)2.5 E F1
(print "LA LA LA\\n" while 1;)152 520.8 Q 6(#l)60 G(oops forever)-6 E F0
5.84(for Exactly)108 537.6 R(lik)2.5 E 2.5(eC)-.1 G(:)-2.5 E F1
(for \($i=0; $i <= $max; $i++\) {)152 555.6 Q(...)176 567.6 Q(})152
579.6 Q F0 1.976
(The C style for loop is rarely needed in Perl since Perl pro)128 597.6
R 1.976(vides the more friendly list scanning)-.15 F F1(foreach)128
609.6 Q F0(loop.)2.5 E(foreach)108 626.4 Q F1(foreach \(@array\) {)152
638.4 Q(print "This element is $_\\n";)176 650.4 Q(})152 662.4 Q 6(#y)
152 680.4 S(ou don't have to use the default $_ either...)-6 E
(foreach my $key \(keys %hash\) {)152 692.4 Q
(print "The value of $key is $hash{$key}\\n";)176 704.4 Q(})152 716.4 Q
F0(perl v5.8.0)72 768 Q(Last change: 2002-06-08)140.96 E(5)179.01 E EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G -.15(Fo)108 96 S 2.5(rm).15 G
(ore detail on looping constructs \(and some that weren')-2.5 E 2.5(tm)
-.18 G(entioned in this o)-2.5 E -.15(ve)-.15 G(rvie).15 E
(w\) see perlsyn.)-.25 E/F1 10/Times-Bold@0 SF
(Builtin operators and functions)108 118.8 Q F0 2.161
(Perl comes with a wide selection of b)108 135.6 R 2.161
(uiltin functions.)-.2 F 2.161(Some of the ones we')7.161 F 2.462 -.15
(ve a)-.5 H 2.162(lready seen include).15 F/F2 10/Courier@0 SF(print)108
147.6 Q F0(,)A F2(sort)2.67 E F0(and)2.67 E F2(reverse)2.67 E F0 5.17
(.A)C .17(list of them is gi)-2.5 F -.15(ve)-.25 G 2.67(na).15 G 2.67
(tt)-2.67 G .17(he start of perlfunc and you can easily read about)-2.67
F(an)108 159.6 Q 2.5(yg)-.15 G -2.15 -.25(iv e)-2.5 H 2.5(nf).25 G
(unction by using)-2.5 E F2(perldoc \255f)2.5 E/F3 10/Courier-Oblique@0
SF(functionname)6 E F0(.)A
(Perl operators are documented in full in perlop, b)108 176.4 Q
(ut here are a fe)-.2 E 2.5(wo)-.25 G 2.5(ft)-2.5 G
(he most common ones:)-2.5 E(Arithmetic)108 193.2 Q F2 18(+a)152 205.2 S
(ddition)-18 E 18(-s)152 217.2 S(ubtraction)-18 E/F4 10/Symbol SF(*)152
229.2 Q F2(multiplication)18 E 18(/d)152 241.2 S(ivision)-18 E F0
(Numeric comparison)108 258 Q F2 6(== equality)152 270 R 6
(!= inequality)152 282 R 18(<l)152 294 S(ess than)-18 E 18(>g)152 306 S
(reater than)-18 E 6(<= less)152 318 R(than or equal)6 E 6(>= greater)
152 330 R(than or equal)6 E F0(String comparison)108 346.8 Q F2 6
(eq equality)152 358.8 R 6(ne inequality)152 370.8 R 6(lt less)152 382.8
R(than)6 E 6(gt greater)152 394.8 R(than)6 E 6(le less)152 406.8 R
(than or equal)6 E 6(ge greater)152 418.8 R(than or equal)6 E F0(\(Wh)
128 436.8 Q 3.191(yd)-.05 G 3.191(ow)-3.191 G 3.191(eh)-3.191 G -2.25
-.2(av e)-3.191 H .691(separate numeric and string comparisons?)3.391 F
.692(Because we don')5.692 F 3.192(th)-.18 G -2.25 -.2(av e)-3.192 H
.692(special v)3.392 F(ariable)-.25 E .039(types, and Perl needs to kno)
128 448.8 R 2.538(ww)-.25 G .038(hether to sort numerically \(where 99 \
is less than 100\) or alphabetically)-2.538 F
(\(where 100 comes before 99\).)128 460.8 Q(Boolean logic)108 477.6 Q F2
6(&& and)152 489.6 R F4<efef>152 501.6 Q F2(or)12 E 18(!n)152 513.6 S
(ot)-18 E F0(\()128 531.6 Q F2(and)A F0(,)A F2(or)4.211 E F0(and)4.211 E
F2(not)4.211 E F0(aren')4.211 E 4.211(tj)-.18 G 1.711(ust in the abo)
-4.211 F 2.011 -.15(ve t)-.15 H 1.711
(able as descriptions of the operators).15 F 5.877<8a74>5.877 G(he)
-5.877 E(y')-.15 E 1.712(re also)-.5 F .378
(supported as operators in their o)128 543.6 R .378(wn right.)-.25 F
(The)5.378 E(y')-.15 E .378
(re more readable than the C\255style operators, b)-.5 F .378(ut ha)-.2
F -.15(ve)-.2 G(dif)128 555.6 Q(ferent precedence to)-.25 E F2(&&)2.5 E
F0(and friends.)2.5 E(Check perlop for more detail.\))5 E(Miscellaneous)
108 572.4 Q F2 18(=a)152 584.4 S(ssignment)-18 E 18(.s)152 596.4 S
(tring concatenation)-18 E 18(xs)152 608.4 S(tring multiplication)-18 E
6(.. range)152 620.4 R(operator \(creates a list of numbers\))6 E F0
(Man)108 637.2 Q 2.5(yo)-.15 G(perators can be combined with a)-2.5 E F2
(=)2.5 E F0(as follo)2.5 E(ws:)-.25 E F2($a += 1;)132 654 Q 6(#s)48 G
(ame as $a = $a + 1)-6 E($a -= 1;)132 666 Q 6(#s)48 G
(ame as $a = $a - 1)-6 E($a .= "\\n";)132 678 Q 6(#s)30 G
(ame as $a = $a . "\\n";)-6 E F0(perl v5.8.0)72 768 Q
(Last change: 2002-06-08)140.96 E(6)179.01 E EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G/F1 10/Times-Bold@0 SF
(Files and I/O)108 96 Q F0 -1.1(Yo)108 112.8 S 2.531(uc)1.1 G .031
(an open a \214le for input or output using the)-2.531 F/F2 10/Courier@0
SF(open\(\))2.532 E F0 2.532(function. It')2.532 F 2.532(sd)-.55 G .032
(ocumented in e)-2.532 F(xtra)-.15 E -.25(va)-.2 G -.05(ga).25 G .032
(nt detail in).05 F(perlfunc and perlopentut, b)108 124.8 Q
(ut in short:)-.2 E F2 6(open\(INFILE, "input.txt"\))132 141.6 R
(or die "Can't open input.txt: $!";)18 E
(open\(OUTFILE, ">output.txt"\) or die "Can't open output.txt: $!";)132
153.6 Q(open\(LOGFILE, ">>my.log"\))132 165.6 Q
(or die "Can't open logfile: $!";)24 E F0 -1.1(Yo)108 182.4 S 2.539(uc)
1.1 G .039(an read from an open \214lehandle using the)-2.539 F F2(<>)
2.539 E F0(operator)2.539 E 5.039(.I)-.55 G 2.539(ns)-5.039 G .039
(calar conte)-2.539 F .039(xt it reads a single line from the)-.15 F
(\214lehandle, and in list conte)108 194.4 Q(xt it reads the whole \214\
le in, assigning each line to an element of the list:)-.15 E F2
(my $line)132 211.2 Q 6(=<)12 G(INFILE>;)-6 E(my @lines = <INFILE>;)132
223.2 Q F0 .303(Reading in the whole \214le at one time is called slurp\
ing. It can be useful b)108 240 R .304(ut it may be a memory hog. Most)
-.2 F(te)108 252 Q
(xt \214le processing can be done a line at a time with Perl')-.15 E 2.5
(sl)-.55 G(ooping constructs.)-2.5 E(The)108 268.8 Q F2(<>)2.5 E F0
(operator is most often seen in a)2.5 E F2(while)2.5 E F0(loop:)2.5 E F2
(while \(<INFILE>\) {)132 285.6 Q 6(#a)30 G
(ssigns each line in turn to $_)-6 E
(print "Just read in this line: $_";)156 297.6 Q(})132 309.6 Q F0 -.8
(We)108 326.4 S -1.65 -.5('v e).8 H .249(already seen ho)3.249 F 2.749
(wt)-.25 G 2.749(op)-2.749 G .249(rint to standard output using)-2.749 F
F2(print\(\))2.749 E F0 5.249(.H)C -.25(ow)-5.249 G -2.15 -.25(ev e).25
H -.4(r,).25 G F2(print\(\))3.149 E F0 .248(can also tak)2.748 F 2.748
(ea)-.1 G(n)-2.748 E(optional \214rst ar)108 338.4 Q
(gument specifying which \214lehandle to print to:)-.18 E F2
(print STDERR "This is your final warning.\\n";)132 355.2 Q
(print OUTFILE $record;)132 367.2 Q(print LOGFILE $logmessage;)132 379.2
Q F0 .485(When you')108 396 R .485
(re done with your \214lehandles, you should)-.5 F F2(close\(\))2.985 E
F0 .485(them \(though to be honest, Perl will clean)2.985 F
(up after you if you for)108 408 Q(get\):)-.18 E F2(close INFILE;)132
424.8 Q F1(Regular expr)108 447.6 Q(essions)-.18 E F0(Perl')108 464.4 Q
3.64(sr)-.55 G -.15(eg)-3.64 G 1.14(ular e).15 F 1.139
(xpression support is both broad and deep, and is the subject of length)
-.15 F 3.639(yd)-.05 G 1.139(ocumentation in)-3.639 F
(perlrequick, perlretut, and else)108 476.4 Q 2.5(where. Ho)-.25 F(we)
-.25 E -.15(ve)-.25 G .8 -.4(r, i).15 H 2.5(ns).4 G(hort:)-2.5 E
(Simple matching)108 493.2 Q F2(if \(/foo/\))152 505.2 Q 6({.)42 G(.. })
-6 E 6(#t)12 G(rue if $_ contains "foo")-6 E(if \($a =~ /foo/\) { ... })
152 517.2 Q 6(#t)12 G(rue if $a contains "foo")-6 E F0(The)128 535.2 Q
F2(//)3 E F0 .5(matching operator is documented in perlop.)3 F .5
(It operates on)5.5 F F2($_)3 E F0 .5(by def)3 F .5
(ault, or can be bound to)-.1 F(another v)128 547.2 Q(ariable using the)
-.25 E F2(=~)2.5 E F0(binding operator \(also documented in perlop\).)
2.5 E(Simple substitution)108 564 Q F2 84(s/foo/bar/; #)152 576 R
(replaces foo with bar in $_)6 E($a =~ s/foo/bar/;)152 588 Q 6(#r)54 G
(eplaces foo with bar in $a)-6 E($a =~ s/foo/bar/g;)152 600 Q 6(#r)48 G
(eplaces ALL INSTANCES of foo with bar in $a)-6 E F0(The)128 618 Q F2
(s///)2.5 E F0(substitution operator is documented in perlop.)2.5 E
(More comple)108 634.8 Q 2.5(xr)-.15 G -.15(eg)-2.5 G(ular e).15 E
(xpressions)-.15 E -1.1(Yo)128 646.8 S 2.656(ud)1.1 G(on')-2.656 E 2.656
(tj)-.18 G .156(ust ha)-2.656 F .456 -.15(ve t)-.2 H 2.656(om).15 G .155
(atch on \214x)-2.656 F .155(ed strings.)-.15 F .155(In f)5.155 F .155
(act, you can match on just about an)-.1 F .155(ything you could)-.15 F
.28(dream of by using more comple)128 658.8 R 2.781(xr)-.15 G -.15(eg)
-2.781 G .281(ular e).15 F 2.781(xpressions. These)-.15 F .281
(are documented at great length in perlre,)2.781 F -.2(bu)128 670.8 S
2.5(tf).2 G(or the meantime, here')-2.5 E 2.5(saq)-.55 G
(uick cheat sheet:)-2.5 E(perl v5.8.0)72 768 Q(Last change: 2002-06-08)
140.96 E(7)179.01 E EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G/F1 10/Courier@0 SF 114(.a)152 96
S(single character)-108 E 102(\\s a)152 108 R
(whitespace character \(space, tab, newline\))6 E 102
(\\S non-whitespace)152 120 R(character)6 E 102(\\d a)152 132 R
(digit \(0-9\))6 E 102(\\D a)152 144 R(non-digit)6 E 102(\\w a)152 156 R
(word character \(a-z, A-Z, 0-9, _\))6 E 102(\\W a)152 168 R
(non-word character)6 E 72([aeiou] matches)152 180 R 6(as)6 G
(ingle character in the given set)-6 E 66([^aeiou] matches)152 192 R 6
(as)6 G(ingle character outside the given set)-6 E(\(foo)152 204 Q/F2 10
/Symbol SF<ef>A F1(bar)A F2<ef>A F1 36(baz\) matches)B
(any of the alternatives specified)6 E 114(^s)152 222 S(tart of string)
-114 E 114($e)152 234 S(nd of string)-114 E F0 1.702
(Quanti\214ers can be used to specify ho)128 252 R 4.201(wm)-.25 G(an)
-4.201 E 4.201(yo)-.15 G 4.201(ft)-4.201 G 1.701(he pre)-4.201 F 1.701
(vious thing you w)-.25 F 1.701(ant to match on, where)-.1 F -.74(``)128
264 S(thing').74 E 5.175('m)-.74 G 2.675
(eans either a literal character)-5.175 F 5.175(,o)-.4 G 2.675
(ne of the metacharacters listed abo)-5.175 F -.15(ve)-.15 G 5.176(,o)
.15 G 5.176(rag)-5.176 G 2.676(roup of)-5.176 F
(characters or metacharacters in parentheses.)128 276 Q F2(*)152 294 Q
F1(zero or more of the previous thing)114 E 114(+o)152 306 S
(ne or more of the previous thing)-114 E 114(?z)152 318 S
(ero or one of the previous thing)-114 E 96({3} matches)152 330 R
(exactly 3 of the previous thing)6 E 84({3,6} matches)152 342 R
(between 3 and 6 of the previous thing)6 E 90({3,} matches)152 354 R 6
(3o)6 G 6(rm)-6 G(ore of the previous thing)-6 E F0(Some brief e)128 372
Q(xamples:)-.15 E F1 78(/^\\d+/ string)152 390 R
(starts with one or more digits)6 E 90(/^$/ nothing)152 402 R
(in the string \(start and end are adjacent\))6 E 48(/\(\\d\\s\){3}/ a)
152 414 R(three digits, each followed by a whitespace)6 E
(character \(eg "3 4 5 "\))272 426 Q 72(/\(a.\)+/ matches)152 438 R 6
(as)6 G(tring in which every odd-numbered letter)-6 E
(is a \(eg "abacadaf"\))272 450 Q 6(#T)152 468 S
(his loop reads from STDIN, and prints non-blank lines:)-6 E
(while \(<>\) {)152 480 Q(next if /^$/;)176 492 Q(print;)176 504 Q(})152
516 Q F0 -.15(Pa)108 532.8 S(rentheses for capturing).15 E .697
(As well as grouping, parentheses serv)128 544.8 R 3.197(eas)-.15 G .697
(econd purpose.)-3.197 F(The)5.696 E 3.196(yc)-.15 G .696
(an be used to capture the results of)-3.196 F(parts of the re)128 556.8
Q(ge)-.15 E(xp match for later use.)-.15 E(The results end up in)5 E F1
($1)2.5 E F0(,)A F1($2)2.5 E F0(and so on.)2.5 E F1 6(#ac)152 574.8 S
(heap and nasty way to break an email address up into parts)-6 E
(if \($email =~ /\([^@]\)+@\(.+\)/\) {)152 592.8 Q
(print "Username is $1\\n";)176 604.8 Q(print "Hostname is $2\\n";)176
616.8 Q(})152 628.8 Q F0(Other re)108 645.6 Q(ge)-.15 E(xp features)-.15
E .22(Perl re)128 657.6 R(ge)-.15 E .221(xps also support backreference\
s, lookaheads, and all kinds of other comple)-.15 F 2.721(xd)-.15 G
2.721(etails. Read)-2.721 F(all)2.721 E
(about them in perlrequick, perlretut, and perlre.)128 669.6 Q
(perl v5.8.0)72 768 Q(Last change: 2002-06-08)140.96 E(8)179.01 E EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Perl Programmers Reference Guide)72 48 Q
(PERLINTR)254.282 E 1.666(O\(1\))-.4 G/F1 10/Times-Bold@0 SF
(Writing subr)108 96 Q(outines)-.18 E F0(Writing subroutines is easy:)
108 112.8 Q/F2 10/Courier@0 SF(sub log {)132 129.6 Q
(my $logmessage = shift;)156 141.6 Q(print LOGFILE $logmessage;)156
153.6 Q(})132 165.6 Q F0(What')108 182.4 Q 3.387(st)-.55 G(hat)-3.387 E
F2(shift)3.387 E F0 5.887(?W)C .887(ell, the ar)-6.687 F .887
(guments to a subroutine are a)-.18 F -.25(va)-.2 G .886
(ilable to us as a special array called).25 F F2(@_)3.386 E F0 .35
(\(see perlv)108 194.4 R .35(ar for more on that\).)-.25 F .35(The def)
5.35 F .35(ault ar)-.1 F .35(gument to the)-.18 F F2(shift)2.85 E F0 .35
(function just happens to be)2.85 F F2(@_)2.85 E F0 5.35(.S)C(o)-5.35 E
F2(my)2.85 E 4.662($logmessage = shift;)108 206.4 R F0 4.662
(shifts the \214rst item of)7.162 F 7.162(ft)-.25 G 4.662(he list of ar)
-7.162 F 4.662(guments and assigns it to)-.18 F F2($logmessage)108 218.4
Q F0(.)A 1.6 -.8(We c)108 235.2 T(an manipulate).8 E F2(@_)2.5 E F0
(in other w)2.5 E(ays too:)-.1 E F2(my \($logmessage, $priority\) = @_;)
132 252 Q 6(#c)42 G(ommon)-6 E(my $logmessage = $_[0];)132 264 Q 6(#u)
102 G(ncommon, and ugly)-6 E F0(Subroutines can also return v)108 280.8
Q(alues:)-.25 E F2(sub square {)132 297.6 Q(my $num = shift;)156 309.6 Q
(my $result = $num)156 321.6 Q/F3 10/Symbol SF(*)6 E F2($num;)6 E
(return $result;)156 333.6 Q(})132 345.6 Q F0 -.15(Fo)108 362.4 S 2.5
(rm).15 G(ore information on writing subroutines, see perlsub)-2.5 E(.)
-.4 E/F4 9/Times-Bold@0 SF(OO)108 385.2 Q F1 -.2(Pe)2.5 G(rl).2 E/F5 9
/Times-Roman@0 SF(OO)108 402 Q F0 .629(Perl is relati)3.129 F -.15(ve)
-.25 G .63(ly simple and is implemented using references which kno).15 F
3.13(ww)-.25 G .63(hat sort of object the)-3.13 F 3.13(ya)-.15 G(re)
-3.13 E 1.557(based on Perl')108 414 R 4.057(sc)-.55 G 1.557
(oncept of packages.)-4.057 F(Ho)6.557 E(we)-.25 E -.15(ve)-.25 G -.4
(r,).15 G F5(OO)4.457 E F0 1.556(Perl is lar)4.057 F 1.556(gely be)-.18
F 1.556(yond the scope of this document.)-.15 F
(Read perlboot, perltoot, perltooc and perlobj.)108 426 Q .547(As a be)
108 442.8 R .547(ginning Perl programmer)-.15 F 3.047(,y)-.4 G .547
(our most common use of)-3.047 F F5(OO)3.047 E F0 .548
(Perl will be in using third-party modules,)3.047 F
(which are documented belo)108 454.8 Q -.65(w.)-.25 G F1(Using P)108
477.6 Q(erl modules)-.2 E F0 .628(Perl modules pro)108 494.4 R .627
(vide a range of features to help you a)-.15 F -.2(vo)-.2 G .627
(id rein).2 F -.15(ve)-.4 G .627(nting the wheel, and can be do).15 F
(wnloaded)-.25 E(from)108 506.4 Q F5(CP)2.919 E(AN)-.828 E F0 2.919(\(h)
2.919 G(ttp://www)-2.919 E(.cpan.or)-.65 E .419(g/ \).)-.18 F 2.919(An)
5.419 G .419
(umber of popular modules are included with the Perl distrib)-2.919 F
(ution)-.2 E(itself.)108 518.4 Q(Cate)108 535.2 Q 2.657
(gories of modules range from te)-.15 F 2.657(xt manipulation to netw)
-.15 F 2.657(ork protocols to database inte)-.1 F 2.656(gration to)-.15
F 2.5(graphics. A)108 547.2 R(cate)2.5 E
(gorized list of modules is also a)-.15 E -.25(va)-.2 G(ilable from).25
E F5(CP)2.5 E(AN)-.828 E F0(.)A 1.6 -.8(To l)108 564 T(earn ho).8 E 2.5
(wt)-.25 G 2.5(oi)-2.5 G(nstall modules you do)-2.5 E(wnload from)-.25 E
F5(CP)2.5 E(AN)-.828 E F0 2.5(,r)C(ead perlmodinstall)-2.5 E 2.921 -.8
(To l)108 580.8 T 1.321(earn ho).8 F 3.821(wt)-.25 G 3.821(ou)-3.821 G
1.321(se a particular module, use)-3.821 F F2(perldoc)3.821 E/F6 10
/Courier-Oblique@0 SF(Module::Name)7.321 E F0 6.322(.T)C 1.322
(ypically you will w)-7.122 F 1.322(ant to)-.1 F F2(use)108 592.8 Q F6
(Module::Name)6.996 E F0 3.496(,w)C .996(hich will then gi)-3.496 F
1.296 -.15(ve y)-.25 H .996(ou access to e).15 F .996
(xported functions or an)-.15 F F5(OO)3.496 E F0(interf)3.496 E .995
(ace to the)-.1 F(module.)108 604.8 Q(perlf)108 621.6 Q .632
(aq contains questions and answers related to man)-.1 F 3.132(yc)-.15 G
.632(ommon tasks, and often pro)-3.132 F .633(vides suggestions for)-.15
F(good)108 633.6 Q F5(CP)2.5 E(AN)-.828 E F0(modules to use.)2.5 E 2.17
(perlmod describes Perl modules in general.)108 650.4 R 2.169
(perlmodlib lists the modules which came with your Perl)7.169 F
(installation.)108 662.4 Q(If you feel the ur)108 679.2 Q
(ge to write Perl modules, perlne)-.18 E(wmod will gi)-.25 E .3 -.15
(ve y)-.25 H(ou good advice.).15 E F4 -.45(AU)72 696 S(THOR).45 E F0
(Kirrily `)108 708 Q(`Skud')-.74 E 2.5('R)-.74 G(obert <skud@cpan.or)
-2.5 E(g>)-.18 E(perl v5.8.0)72 768 Q(Last change: 2002-06-08)140.96 E
(9)179.01 E EP
%%Trailer
end
%%EOF
